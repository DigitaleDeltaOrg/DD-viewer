app.controller("MapCtrl",
	["$scope", "$compile", "$rootScope",
		function($scope, $compile, $rootScope){


    $scope.layers = {
        osm: L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png'),
        blanco: L.tileLayer.wms('http://geoserver6.lizard.net/geoserver/deltaportaal/wms', {'layers': 'basiskaart'}),
        transport: L.tileLayer('http://{s}.tile2.opencyclemap.org/transport/{z}/{x}/{y}.png'),
        bestuurlijke_grenzen: L.tileLayer('http://dev1.nxt.lizard.net:9000/bestuurlijke_grenzen/{z}/{x}/{y}.png'),
        gesloten_leiding: {'geslotenleiding': 'http://dev1.nxt.lizard.net:9000/geslotenleiding/{z}/{x}/{y}.png'}
    };

    $scope.map = L.map('map', {
        center: new L.LatLng(52.0992287, 5.5698782),
        // center: new L.LatLng(42.3453, -71.0647),
        zoomControl: false,
        keyboard: false, // solves problem with Chrome top bar hiding on map click, but prevents keyboard navigation... has to do with tabindex being autogenerated in newest leaflet version!
        zoom: 8,
        layers: [$scope.layers.transport]
    });



    $scope.baseMaps = {
        "Blanco": $scope.layers.blanco,
        "Openstreetmap": $scope.layers.osm,
        "Transport": $scope.layers.transport,
        "Bestuurlijke grenzen": $scope.layers.bestuurlijke_grenzen
    };

    L.control.layers($scope.baseMaps).addTo($scope.map);

    // L.tileLayer($scope.layers.geslotenleiding,
    //             {'minZoom': 14})
    //     .addTo($scope.map)
    //     .bringToFront();

    var utfGrid = new L.UtfGrid('http://dev1.nxt.lizard.net:9000/bestuurlijke_grenzen_utfgrid/{z}/{x}/{y}.json?callback={cb}', {resolution: 4});

    // $scope.map.addLayer(utfGrid);

    utfGrid.on('click', function (e) {
        if (e.data) {
            // alert('click:' + e.data.gemeentenaam + ', vrouwen: ' + e.data.vrouwen + ',mannen: ' + e.data.mannen);
        } else {
            // alert('click: nothing');
        }
    });

    utfGrid.on('mouseover', function (e) {
        console.log('mouseover: ' + e.data.gemeentenaam);
    });
    utfGrid.on('mousemove', function (e) {
        console.log('mousemove: ' + e.data.gemeentenaam);
    });
    utfGrid.on('mouseout', function (e) {
        console.log('mouseout: ' + e.data.gemeentenaam);
    });


    L.tileLayer('http://{s}.tile.cloudmade.com/4e5f745e28654b7eb26aab577eed79ee/997/256/{z}/{x}/{y}.png', {
        attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://cloudmade.com">CloudMade</a>',
        maxZoom: 18
    }).addTo($scope.map);









    parks = L.tileLayer.geoJson('http://{s}.tile.openstreetmap.us/vectiles-land-usages/{z}/{x}/{y}.json', {'minZoom': 16}, {
      onEachFeature: function(f, l) {
        var array, key, value;
        array = (function() {
          var _ref, _results;
          _ref = f.properties;
          _results = [];
          for (var key in _ref) {
            value = _ref[key];
            _results.push("" + key + ": " + value);
          }
          return _results;
        })();
        return l.bindPopup(array.join('<br/>'));
      },
      style: function(f) {
        var out;
        out = {
          fillOpacity: 1,
          stroke: false
        };
        switch (f.properties.kind) {
          case 'park':
          case 'common':
          case 'grass':
            out.fillColor = 'rgb(115,178,115)';
            break;
          case 'golf_course':
          case 'recreation_ground':
          case 'pitch':
          case 'playground':
            out.fillColor = 'rgb(110,183,110)';
            break;
          case 'conservation':
          case 'farm':
          case 'farmland':
            out.fillColor = 'rgb(143,219,143)';
            break;
          case 'cemetery':
            out.fillColor = 'rgb(78,120,78)';
            break;
          case 'university':
          case 'college':
            out.fillColor = 'rgb(77,50,230)';
            break;
          case 'school':
            out.fillColor = 'rgb(125,106,235)';
            break;
          case 'forest':
            out.fillColor = 'rgb(26,112,26)';
            break;
          case 'parking':
          case 'industrial':
          case 'fuel':
            out.fillColor = 'rgb(0,0,0)';
            break;
          case 'commercial':
          case 'retail':
          case 'hospital':
            out.fillColor = 'rgb(255,193,69)';
            break;
          case 'residential':
            out.fillColor = 'rgb(212,47,58)';
            break;
          case 'railway':
          case 'pedestrian':
          case 'parking':
            out.fillColor = 'rgb(204,204,204)';
            break;
          default:
            out.fillColor = 'rgb(224,224,224)';
        }
        return out;
      }
    });

    water = L.tileLayer.geoJson('http://{s}.tile.openstreetmap.us/vectiles-water-areas/{z}/{x}/{y}.json', {'minZoom': 16}, {
      style: {
        fillColor: 'rgb(151,219,242)',
        fillOpacity: 1,
        stroke: false,
        clickable: false
      }
    });

    roads = L.tileLayer.geoJson('http://{s}.tile.openstreetmap.us/vectiles-highroad/{z}/{x}/{y}.json', {'minZoom': 16}, {
      onEachFeature: function(feature, l) {
        // Put a click handler on the element
        var retval = l.on('click', function() {
            $rootScope.$broadcast('featureclick', feature.properties);
        });

        // Unbind the popup handler for the element and return.
        l.unbindPopup();
        return retval;
      },
      style: {
        fillColor: 'rgb(0,0,0)',
        fillOpacity: 1,
        weight: 5,
        color: 'rgb(0,0,0)'
      }
    });

    // parks.addTo($scope.map);
    water.addTo($scope.map);
    roads.addTo($scope.map);

    roads.bringToFront();
    // parks.bringToBack();













    
    $scope.map.on('click', function(e) {
        $rootScope.$broadcast('mapclick', e.latlng);
    });

    $scope.$on('panzoom', function(e,lat,lon) {
        $scope.map.setZoom(17);
        $scope.map.panTo(new L.LatLng(lat, lon));
    });

}]);